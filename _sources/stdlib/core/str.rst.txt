.. seq:module:: core.str

:seq:mod:`core.str`
-------------------

Source code: `core/str.seq <https://github.com/seq-lang/seq/blob/master/stdlib/core/str.seq>`_

.. seq:extension:: str

   **Magic methods:**

      .. seq:method:: __init__()
         :noindex:

      .. seq:method:: __hash__()
         :noindex:

      .. seq:method:: __eq__(other : str)
         :noindex:

      .. seq:method:: __ne__(other : str)
         :noindex:

      .. seq:method:: __lt__(other : str)
         :noindex:

      .. seq:method:: __le__(other : str)
         :noindex:

      .. seq:method:: __gt__(other : str)
         :noindex:

      .. seq:method:: __ge__(other : str)
         :noindex:

      .. seq:method:: __str__()
         :noindex:

      .. seq:method:: __repr__()
         :noindex:

      .. seq:method:: __len__()
         :noindex:

      .. seq:method:: __bool__()
         :noindex:

      .. seq:method:: __add__(other : str)
         :noindex:

      .. seq:method:: __getitem__(idx : int)
         :noindex:

      .. seq:method:: __getitem__(s : eslice)
         :noindex:

      .. seq:method:: __getitem__(s : slice)
         :noindex:

      .. seq:method:: __getitem__(s : lslice)
         :noindex:

      .. seq:method:: __getitem__(s : rslice)
         :noindex:

      .. seq:method:: __getitem__(s : esslice)
         :noindex:

      .. seq:method:: __getitem__(s : rsslice)
         :noindex:

      .. seq:method:: __getitem__(s : lsslice)
         :noindex:

      .. seq:method:: __getitem__(s : sslice)
         :noindex:

      .. seq:method:: __contains__(pattern : str)
         :noindex:

      .. seq:method:: __iter__()
         :noindex:

      .. seq:method:: __reversed__()
         :noindex:

      .. seq:method:: __mul__(x : int)
         :noindex:

      .. seq:method:: __copy__()
         :noindex:

   **Methods:**

      .. seq:method:: c_str()

      .. seq:method:: cat(v : list[str])

      .. seq:method:: cati(v : generator[str], total : int)

      .. seq:method:: cati_ext(v : generator[str])

      .. seq:method:: join(l)

      .. seq:method:: from_ptr(t : cobj)

      .. seq:method:: isdigit()

            
                    str.isdigit() -> bool
            
                    Return True if all characters in str are digits
                    and there is at least one character in str, False otherwise.
            


      .. seq:method:: islower()

            
                    str.islower() -> bool
            
                    Return True if all cased characters in str are lowercase and there is
                    at least one cased character in str, False otherwise.
            


      .. seq:method:: isupper()

            
                    str.isupper() -> bool
            
                    Return True if all cased characters in str are uppercase and there is
                    at least one cased character in str, False otherwise.
            


      .. seq:method:: isalnum()

            
                    str.isalnum() -> bool
            
                    Return True if all characters in str are alphanumeric
                    and there is at least one character in str, False otherwise.
            


      .. seq:method:: isalpha()

            
                    str.isalpha() -> bool
            
                    Return True if all characters in str are alphabetic
                    and there is at least one character in str, False otherwise.
            


      .. seq:method:: isspace()

            
                    str.isspace() -> bool
            
                    Return True if all characters in str are whitespace
                    and there is at least one character in str, False otherwise.
            


      .. seq:method:: istitle()

            
                    str.istitle() -> bool
            
                    Return True if str is a titlecased string and there is at least one
                    character in str, i.e. uppercase characters may only follow uncased
                    characters and lowercase characters only cased ones. Return False
                    otherwise.
            


      .. seq:method:: capitalize()

            
                    str.capitalize() -> copy of str
            
                    Return a copy of str with only its first character capitalized (ASCII)
                    and the rest lower-cased.
            


      .. seq:method:: isdecimal()

            
                    str.isdecimal() -> bool
            
                    Return True if str is a decimal string, False otherwise.
                    str is a decimal string if all characters in str are decimal and
                    there is at least one character in str.
            


      .. seq:method:: lower()

            
                    str.lower() -> copy of str
            
                    Return a copy of str with all ASCII characters converted to lowercase.
            


      .. seq:method:: upper()

            
                    str.upper() -> copy of str
            
                    Return a copy of str with all ASCII characters converted to uppercase.
            


      .. seq:method:: isascii()

            
                    str.isascii() -> bool
            
                    Return True if str is empty or all characters in str are ASCII,
                    False otherwise.
            


      .. seq:method:: casefold()

            
                    str.casefold() -> copy of str
            
                    Return a version of the string suitable for caseless comparisons.
            
                    Unlike Python, casefold() deals with just ASCII characters.
            


      .. seq:method:: swapcase()

            
                    str.swapcase() -> copy of str
            
                    Return a copy of str with uppercase ASCII characters converted
                    to lowercase ASCII and vice versa.
            


      .. seq:method:: title()

            
                    str.title() -> copy of str
            
                    Return a titlecased version of str, i.e. ASCII words start with uppercase
                    characters, all remaining cased characters have lowercase.
            


      .. seq:method:: isnumeric()

            
                    str.isdecimal() -> bool
            
                    Return True if the string is a numeric string, False otherwise.
                    A string is numeric if all characters in the string are numeric
                    and there is at least one character in the string.
            
                    Unlike Python, isnumeric() deals with just ASCII characters.
            


      .. seq:method:: ljust(width : int, fillchar : str)

            
                    ljust(width[, fillchar]) -> string
            
                    Return a left-justified string of length width.
            
                    Padding is done using the specified fill character (default is a space).
            


      .. seq:method:: rjust(width : int, fillchar : str)

            
                    rjust(width[, fillchar]) -> string
            
                    Return a right-justified string of length width.
            
                    Padding is done using the specified fill character (default is a space).
            


      .. seq:method:: center(width : int, fillchar : str)

            
                    str.center(width[, fillchar]) -> string
            
                    Return str centered in a string of length width. Padding is
                    done using the specified fill character (default is a space)
            


      .. seq:method:: zfill(width : int)

            
                    str.zfill(width) -> string
            
                    Pad a numeric string str with zeros on the left, to fill a field
                    of the specified width.  The string str is never truncated.
            


      .. seq:method:: count(sub : str, start : int = 0, end : int = 0x7fffffffffffffff)

            
                    str.count(sub[, start[, end]]) -> int
            
                    Return the number of occurrences of subsection sub in
                    bytes str[start:end].  Optional arguments start and end are interpreted
                    as in slice notation.
            


      .. seq:method:: find(sub : str, start : int = 0, end : int = 0x7fffffffffffffff)

            
                    str.find(sub [,start [,end]]) -> int
            
                    Return the lowest index in str where substring sub is found,
                    such that sub is contained within str[start:end].  Optional
                    arguments start and end are interpreted as in slice notation.
            
                    Return -1 on failure.
            


      .. seq:method:: rfind(sub : str, start : int = 0, end : int = 0x7fffffffffffffff)

            
                    str.rfind(sub [,start [,end]]) -> int
            
                    Return the highest index in str where substring sub is found,
                    such that sub is contained within str[start:end].  Optional
                    arguments start and end are interpreted as in slice notation.
            
                    Return -1 on failure.
            


      .. seq:method:: isidentifier()

            
                    str.isidentifier() -> bool
            
                    Return True if the string is a valid identifier, False otherwise.
                    Unlike Python, isidentifier() deals with just ASCII characters.
            


      .. seq:method:: isprintable()

            
                    str.isprintable() -> bool
            
                    Return True if the string is printable or empty, False otherwise.
                    Unlike Python, isprintable() deals with just ASCII characters.
            


      .. seq:method:: lstrip(chars : str = "")

            
                    str.lstrip([chars]) -> string
            
                    Return a copy of the string str with leading whitespace removed.
                    If chars is given, remove characters in chars instead.
                    Unlike Python, lstrip() deals with just ASCII characters.
            


      .. seq:method:: rstrip(chars : str = "")

            
                    str.rstrip([chars]) -> string
            
                    Return a copy of the string str with trailing whitespace removed.
                    If chars is given, remove characters in chars instead.
                    Unlike Python, lstrip() deals with just ASCII characters.
            


      .. seq:method:: strip(chars : str = "")

            
                    str.strip([chars]) -> string
            
                    Return a copy of the string str with leading and trailing
                    whitespace removed.
                    If chars is given, remove characters in chars instead.
                    Unlike Python, lstrip() deals with just ASCII characters.
            


      .. seq:method:: partition(sep : str)

            
                    Search for the separator sep in str, and return the part before it,
                    the separator itself, and the part after it.  If the separator is not
                    found, return str and two empty strings.
            


      .. seq:method:: rpartition(sep : str)

            
                    Search for the separator sep in str, starting at the end of str, and return
                    the part before it, the separator itself, and the part after it.  If the
                    separator is not found, return two empty strings and str.
            


      .. seq:method:: split(sep : optional[str] = None, maxsplit : int = -1)

            
                    str.split([sep [,maxsplit]]) -> list of strings
            
                    Return a list of the words in the string str, using sep as the
                    delimiter string.  If maxsplit is given, at most maxsplit
                    splits are done. If sep is not specified, any
                    whitespace string is a separator and empty strings are removed
                    from the result.
            


      .. seq:method:: rsplit(sep : optional[str] = None, maxsplit : int = -1)

            
                    str.rsplit([sep [,maxsplit]]) -> list of strings
            
                    Return a list of the words in the string str, using sep as the
                    delimiter string, starting at the end of the string and working
                    to the front.  If maxsplit is given, at most maxsplit splits are
                    done. If sep is not specified, any whitespace string
                    is a separator.
            


      .. seq:method:: splitlines(keepends : bool = False)

            
                    str.splitlines([keepends]) -> list of strings
            
                    Return a list of the lines in str, breaking at line boundaries.
                    Line breaks are not included in the resulting list unless keepends
                    is given and true.
            


      .. seq:method:: startswith(prefix : str, start : int = 0, end : int = 0x7fffffffffffffff)

            
                    str.startswith(prefix[, start[, end]]) -> bool
            
                    Return True if str starts with the specified prefix, False otherwise.
                    With optional start, test str beginning at that position.
                    With optional end, stop comparing str at that position.
            


      .. seq:method:: endswith(suffix : str, start : int = 0, end : int = 0x7fffffffffffffff)

            
                    str.endswith(prefix[, start[, end]]) -> bool
            
                    Return True if str ends with the specified suffix, False otherwise.
                    With optional start, test str beginning at that position.
                    With optional end, stop comparing str at that position.
            


      .. seq:method:: index(sub : str, start : int = 0, end : int = 0x7fffffffffffffff)

            
                    str.index(sub [,start [,end]]) -> int
            
                    Like str.find() but raise ValueError when the substring is not found.
            


      .. seq:method:: rindex(sub : str, start : int = 0, end : int = 0x7fffffffffffffff)

            
                    str.index(sub [,start [,end]]) -> int
            
                    Like str.find() but raise ValueError when the substring is not found.
            


      .. seq:method:: replace(old : str, new : str, maxcount : int = -1)

            
                    str.replace(old, new[, count]) -> string
            
                    Return a copy of string str with all occurrences of substring
                    old replaced by new.  If the optional argument maxcount is
                    given, only the first maxcount occurrences are replaced.
            
                    For now, maxcount is required.
            


      .. seq:method:: expandtabs(tabsize : int = 8)

            
                    str.expandtabs([tabsize]) -> string
            
                    Return a copy of str where all tab characters are expanded using spaces.
                    If tabsize is not given, a tab size of 8 characters is assumed.
            


      .. seq:method:: translate(table)

            
                    Return a copy with each character mapped by the given translation table.
            
                    Unlike Python, translate() currently does not allow the translation
                    table to be a bytes object of length 256.
            
                    As well, None implemented yet until None and be placed inside the table
                    with other strings. Use: {'a': ''} to replace a string for now
            






