.. seq:module:: core.collections.dict

:seq:mod:`core.collections.dict`
--------------------------------

Source code: `core/collections/dict.seq <https://github.com/seq-lang/seq/blob/master/stdlib/core/collections/dict.seq>`_

.. seq:class:: dict[K,V]

   **Magic methods:**

      .. seq:method:: __init__()
         :noindex:

      .. seq:method:: __init__(g : generator[tuple[K, V]])
         :noindex:

      .. seq:method:: __init__(g : tuple[K, V])
         :noindex:

      .. seq:method:: __getitem__(key : K)
         :noindex:

      .. seq:method:: __setitem__(key : K, val : V)
         :noindex:

      .. seq:method:: __delitem__(key : K)
         :noindex:

      .. seq:method:: __contains__(key : K)
         :noindex:

      .. seq:method:: __eq__(other : dict[K, V])
         :noindex:

      .. seq:method:: __ne__(other : dict[K, V])
         :noindex:

      .. seq:method:: __iter__()
         :noindex:

      .. seq:method:: __len__()
         :noindex:

      .. seq:method:: __copy__()
         :noindex:

      .. seq:method:: __str__()
         :noindex:

   **Methods:**

      .. seq:method:: prefetch(key : K)

      .. seq:method:: resize(new_n_buckets : int)

      .. seq:method:: get(key : K, s : V)

      .. seq:method:: setdefault(key : K, val : V)

      .. seq:method:: increment[T](key : K, by : T = 1)

      .. seq:method:: update(other : dict[K, V])

      .. seq:method:: pop(key : K)

      .. seq:method:: clear()

      .. seq:method:: items()

      .. seq:method:: keys()

      .. seq:method:: values()

      .. seq:method:: copy()

      .. seq:method:: fromkeys[KS, V](ks : KS, v : V)





