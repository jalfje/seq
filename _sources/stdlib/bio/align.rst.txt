.. seq:module:: bio.align

:seq:mod:`bio.align`
--------------------

Source code: `bio/align.seq <https://github.com/seq-lang/seq/blob/master/stdlib/bio/align.seq>`_

.. seq:type:: SubMat

   
       Substitution matrix for amino acid alignment
   

   **Magic methods:**

      .. seq:method:: __init__(d : dict[tuple[str, str], int])
         :noindex:

            
                    Creates a `SubMat` from a dictionary mapping
                    amino acid pairs to score values.
            


      .. seq:method:: __str__()
         :noindex:



.. seq:extension:: CIGAR

   **Properties:**

      .. seq:attribute:: qlen

      .. seq:attribute:: rlen

   **Magic methods:**

      .. seq:method:: __init__()
         :noindex:

      .. seq:method:: __len__()
         :noindex:

      .. seq:method:: __eq__(other : CIGAR)
         :noindex:

      .. seq:method:: __ne__(other : CIGAR)
         :noindex:

      .. seq:method:: __copy__()
         :noindex:

      .. seq:method:: __bool__()
         :noindex:

      .. seq:method:: __init__(cigar : str)
         :noindex:

      .. seq:method:: __getitem__(idx : int)
         :noindex:

      .. seq:method:: __iter__()
         :noindex:

      .. seq:method:: __str__()
         :noindex:

      .. seq:method:: __reversed__()
         :noindex:



.. seq:extension:: Alignment

   **Properties:**

      .. seq:attribute:: cigar

      .. seq:attribute:: score

   **Magic methods:**

      .. seq:method:: __init__()
         :noindex:

      .. seq:method:: __init__(cigar : str, score : int)
         :noindex:

      .. seq:method:: __bool__()
         :noindex:



.. seq:extension:: seq

   **Magic methods:**

      .. seq:method:: __matmul__(other : seq)
         :noindex:

            
                    Performs Smith-Waterman alignment against another sequence.
                    Mismatch and gap costs are 1 (Levenshtein distance).
            


   **Methods:**

      .. seq:method:: align(other : seq, a : int = 2, b : int = 4, ambig : int = 0, gapo : int = 4, gape : int = 2, gapo2 : int = -1, gape2 : int = -1, bandwidth : int = -1, zdrop : int = -1, end_bonus : int = 0, score_only : bool = False, right : bool = False, generic_sc : bool = False, approx_max : bool = False, approx_drop : bool = False, ext_only : bool = False, rev_cigar : bool = False, splice : bool = False, splice_fwd : bool = False, splice_rev : bool = False, splice_flank : bool = False)

            
                    Performs Smith-Waterman alignment against another sequence.
            
                      - `a`: match score
                      - `b`: mismatch score
                      - `ambig`: ambiguous (i.e. N) match score
                      - `gapo`: gap open cost
                      - `gape`: gap extension cost
                      - `gapo2`: 2nd gap open cost for dual gap cost function
                      - `gape2`: 2nd gap extension cost for dual gap cost function
                      - `bandwidth`: bandwidth for DP alignment
                      - `zdrop`: off-diagonal drop-off to stop extension
                      - `end_bonus`: score bonus for reaching end of DP matrix
                      - `score_only`: if true, don’t compute CIGAR
                      - `right`: if true, right-align gaps
                      - `approx_max`: if true, approximate max
                      - `approx_drop`: if true, approximate Z-drop
                      - `rev_cigar`: if true, reverse CIGAR in output
                      - `ext_only`: if true, perform extension alignment
                      - `splice`: if true, perform spliced alignment
            




.. seq:extension:: pseq

   **Magic methods:**

      .. seq:method:: __matmul__(other : pseq)
         :noindex:

            
                    Performs Smith-Waterman alignment against another sequence.
                    Uses Blosum-62, gap open cost 11 and gap extend cost 1.
            


   **Methods:**

      .. seq:method:: align(other : pseq, mat : SubMat, gapo : int = 4, gape : int = 2, gapo2 : int = -1, gape2 : int = -1, bandwidth : int = -1, zdrop : int = -1, end_bonus : int = 0, score_only : bool = False, right : bool = False, generic_sc : bool = False, approx_max : bool = False, approx_drop : bool = False, ext_only : bool = False, rev_cigar : bool = False)

            
                    Performs Smith-Waterman alignment against another sequence.
            
                      - `mat`: score matrix
                      - `gapo`: gap open cost
                      - `gape`: gap extension cost
                      - `gapo2`: 2nd gap open cost for dual gap cost function
                      - `gape2`: 2nd gap extension cost for dual gap cost function
                      - `bandwidth`: bandwidth for DP alignment
                      - `zdrop`: off-diagonal drop-off to stop extension
                      - `end_bonus`: score bonus for reaching end of DP matrix
                      - `score_only`: if true, don’t compute CIGAR
                      - `right`: if true, right-align gaps
                      - `approx_max`: if true, approximate max
                      - `approx_drop`: if true, approximate Z-drop
                      - `rev_cigar`: if true, reverse CIGAR in output
                      - `ext_only`: if true, perform extension alignment
            




.. seq:type:: InterAlignParams



.. seq:type:: SeqPair

   **Magic methods:**

      .. seq:method:: __init__(id : int, len1 : int, len2 : int, flags : int)
         :noindex:









